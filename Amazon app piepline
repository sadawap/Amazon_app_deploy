pipeline {
    agent any
    tools {
        jdk 'java17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/sadawap/Amazon_app_deploy.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Amazon \
                    -Dsonar.projectKey=Amazon'''
                }
            }
        }
        stage("quality gate") {
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'amazon-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Trivy Scan'){
            steps{
                sh 'trivy fs . > TRIVYREPORT.txt'
            }
        }
        stage('Docker Image Push & Pull'){
            steps{
                script{
                withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                    sh 'docker build -t amazon-app .'
                    sh 'docker tag amazon-app sadawap/amazon-app:latest'
                    sh 'docker push sadawap/amazon-app:latest'
                }
            }
        }
        }
        stage('Trivy image Scan'){
            steps{
                sh 'trivy image sadawap/amazon-app:latest > TRIVYIMAGE.txt'
            }
        }
        stage('Run Amazon app'){
            steps{
                sh 'docker run -d --name amazon-app -p 3000:3000 sadawap/amazon-app:latest'
            }
        }
            }
        }
